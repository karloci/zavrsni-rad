security:
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    providers:
        app_user_provider:
            id: App\Security\UserProvider
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        authentication:
            pattern: ^/authentication/
            stateless: true
        reset_password:
            pattern: ^/reset-password/
            stateless: true
        verify_email:
            pattern: ^/verify-email/
            stateless: true
        api:
            pattern: ^/
            stateless: true
            custom_authenticators:
                - App\Security\AccessTokenAuthenticator
            logout:
                path: /logout
    access_control:
        - { path: ^/authentication/login,          roles: PUBLIC_ACCESS }
        - { path: ^/authentication/register,       roles: PUBLIC_ACCESS }
        - { path: ^/authentication/refresh-token,  roles: PUBLIC_ACCESS }
        - { path: ^/reset-password/request,        roles: PUBLIC_ACCESS }
        - { path: ^/reset-password/confirm,        roles: PUBLIC_ACCESS }
        - { path: ^/verify-email/request,          roles: PUBLIC_ACCESS }
        - { path: ^/verify-email/confirm,          roles: PUBLIC_ACCESS }
        - { path: ^/,                              roles: IS_AUTHENTICATED_FULLY }
    role_hierarchy:
        ROLE_ADMIN: ROLE_OWNER
        ROLE_OWNER: ROLE_USER
when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
